#!/usr/bin/env ruby

# Copyright (c) 2015-2015, John Mettraux, jmettraux@gmail.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# Made in Japan.


require File.join(File.dirname(__FILE__), '../lib/podoff')

require 'pp'
require 'optparse'


command = nil

OptionParser.new do |op|

  op.banner = "\nUsage: ./#{__FILE__} [option] {fname}"
  op.separator ''

  op.on('-o', '--objs', 'List objs') do
    command = 'list_objs'
  end
  op.on('-w', '--rewrite', 'Rewrite') do
    command = 'rewrite'
  end
  op.on('-s', '--stamp', 'Apply time stamp at bottom of each page') do
    command = 'stamp'
  end
  op.on('-r', '--recompress', 'Recompress') do
    command = 'recompress'
  end

  op.on('--version', 'Show version') do
    puts "Podoff #{Podoff::VERSION}"
    exit 0
  end

  op.on_tail('-h', '--help', 'Show this message') do
    puts op
    puts
    exit 0
  end
end.parse!

fail ArgumentError.new("missing command -r / ...") unless command

fname = ARGV.shift
fail ArgumentError.new("missing {fname}") unless fname

doc =
  if %w[ recompress ].include?(command)
    nil
  else
    Podoff.load(fname)
  end

module Podoff::Commands

  def self.list_objs(fname, doc)

    doc.objs.each do |ref, o|
      puts "#{ref} obj #{o.attributes.inspect}"
    end
  end

  def self.rewrite(fname, doc)

    doc.rewrite($stdout)
  end

  def self.stamp(fname, doc)

    fo = doc.add_base_font('Helvetica')
    st = doc.add_stream {
      tf '/PoHelv', 14
      bt 10, 10, "#{Time.now} podoff #{Podoff::VERSION}"
    }
    doc.pages.each { |pa|
      pa = doc.re_add(pa)
      pa.insert_font('/PoHelv', fo)
      pa.insert_content(st)
    }

    doc.write($stdout)
  end

  def self.recompress(fname, doc)

    system "qpdf --qdf --object-streams=disable #{fname} __out.pdf"
    exec "qpdf __out.pdf -"
  end
end

Podoff::Commands.send(command, fname, doc)

